/*ditulis oleh kang chaerul anam
*kunjungi web nya di www.anakkendali.com
* November 2018
*/

#include <lcd_i2c_cvavr.h>
#include <stdio.h>
#include <stdlib.h>
#include <delay.h>
#include <twi.h>

unsigned char input;  

uint8_t display;  
uint8_t _rows;
uint8_t _cols;
uint8_t lcd_addr;
 
void i2c_begin (void)
{
    /*set bus speed*/
    TWBR = SETBUSS;
}


unsigned char i2c_send_start (void)
{
    /*writing a one to TWINT clears it, TWSTA=Start, TWEN=TWI-enable*/
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    /*wait, until start condition has been sent --> ACK*/
    while (!(TWCR & (1<<TWINT)));
    return TWSR;
}


void i2c_send_stop (void)
{
    /*writing a one to TWINT clears it, TWSTO=Stop, TWEN=TWI-enable*/
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);    
}


unsigned char i2c_send_add_rw (unsigned char address, unsigned char rw)
{
    /*address can be 0 .. 8; rw=0 --> write, rw=1 --> read*/
    unsigned char addr_byte = 0;
    /*shift address one bit left*/
    addr_byte = address << 1;
    /*set RW-Bit, if necessary*/
    addr_byte |= rw;
    /*0b0100xxx0 --> address of Expander*/
    addr_byte |= 0b01000000;
    /*TWDR contains byte to send*/
    TWDR = addr_byte;
    /*send content of TWDR*/
    TWCR = (1<<TWINT) | (1<<TWEN);
    /*wait, until address has been sent --> ACK*/
    while (!(TWCR & (1<<TWINT)));
    return TWSR;
}


unsigned char i2c_send_byte (unsigned char byte)
{
    /*TWDR contains byte to send*/
    TWDR = byte;
    /*send content of TWDR*/
    TWCR = (1<<TWINT) | (1<<TWEN);
    /*wait, until byte has been sent --> ACK*/
    while (!(TWCR & (1<<TWINT)));
	return TWSR;
}


unsigned char i2c_read_byte (void)
{
	/*send content of TWDR; TWEA = enable ACK*/
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
	/*wait, until byte has been received --> ACK*/
	while (!(TWCR & (1<<TWINT)));
	return TWDR;
}


unsigned char i2c_get_inputs (unsigned char address)
{
	i2c_begin ();
	i2c_send_start ();
	i2c_send_add_rw (address, 1);
	input = i2c_read_byte ();
	i2c_send_stop ();
	return input;
}


void i2c_set_outputs (unsigned char address, unsigned char byte)
{
	i2c_begin ();
	i2c_send_start ();
	i2c_send_add_rw (address, 0);
	i2c_send_byte (byte);
	i2c_send_stop ();
}



void lcd_begin (uint8_t address, uint8_t col, uint8_t row)
{
    _cols = col;
    _rows = row;
    lcd_addr = address;
	lcd_send_cmd (0x02);
	lcd_send_cmd (0x28);
	lcd_send_cmd (0x0c);
	lcd_send_cmd (0x80);
}


void lcd_send_cmd (char cmd)
{
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
	data_l = ((cmd<<4)&0xf0);
	data_t[0] = data_u|0x0C;  //en=1, rs=0
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
    i2c_set_outputs(lcd_addr, data_t[0]);
    i2c_set_outputs(lcd_addr, data_t[1]);
    i2c_set_outputs(lcd_addr, data_t[2]);
    i2c_set_outputs(lcd_addr, data_t[3]);
}

void lcd_putchar (char data)
{
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
	data_l = ((data<<4)&0xf0);
	data_t[0] = data_u|0x0D;  //en=1, rs=0
	data_t[1] = data_u|0x09;  //en=0, rs=0
	data_t[2] = data_l|0x0D;  //en=1, rs=0
	data_t[3] = data_l|0x09;  //en=0, rs=0    
    i2c_set_outputs(lcd_addr, data_t[0]);
    i2c_set_outputs(lcd_addr, data_t[1]);
    i2c_set_outputs(lcd_addr, data_t[2]);
    i2c_set_outputs(lcd_addr, data_t[3]);
    
}

void lcd_clear (void){

lcd_send_cmd(LCD_CLEAR);
delay_us(2000);
}

 void lcd_puts(char *str)
{
	while (*str) lcd_putchar (*str++);
}   

void lcd_gotoxy (uint8_t col, uint8_t row)
{
 int row_offset[] = { 0x00, 0x40, 0x14, 0x54};
 if (row > _rows)
 {
 row = _rows-1;
 }     
 lcd_send_cmd (CONTROLCURSOR | (col + row_offset[row]));
 
}